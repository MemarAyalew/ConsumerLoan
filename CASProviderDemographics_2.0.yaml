---
swagger: "2.0"
info:
  x-ibm-name: "CASProviderDemographics"
  title: "CASProviderDemographics"
  version: "2.0"
  description: "Mapped as per the combined api response from Attribute and Demographic"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/v2/provider"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientSecretHeader:
    type: "apiKey"
    description: "Client will pass the API Secret in the HTTP Header."
    in: "header"
    name: "X-IBM-Client-Secret"
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
    description: "Client will pass the API key in the HTTP Header."
security:
- clientIdHeader: []
  clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - operation-switch:
        title: "operation-switch"
        case:
        - operations:
          - verb: "get"
            path: "/"
          execute:
          - switch:
              title: "switch"
              case:
              - condition: "apim.getvariable('request.headers.provider-id') != null\
                  \ && apim.getvariable('request.headers.provider-indicator') != null\
                  \ && apim.getvariable('request.headers.provider-multi-address-key')\
                  \ != null"
                execute:
                - set-variable:
                    title: "set-provider-headers"
                    actions:
                    - set: "provider_id"
                      value: "$(request.headers.provider-id)"
                      required: true
                    - set: "provider_indicator"
                      value: "$(request.headers.provider-indicator)"
                    - set: "provider_multiaddresskey"
                      value: "$(request.headers.provider-multi-address-key)"
                    - set: "limit"
                      value: "$(request.parameters.limit)"
                    - set: "offset"
                      value: "$(request.parameters.offset)"
                    - set: "check_Contract"
                      value: "$(request.headers.checkContract)"
                    version: "1.0.0"
                    description: "To set the incoming header"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: "var qstring = apim.getvariable('request.search');\r\n\
                      var targeturlAttr = 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes'\
                      \ + qstring;\r\nvar targeturlDemo= 'https://provider-demographics-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/demographics'\
                      \ + qstring;\r\nvar urlopen1 = require('urlopen');\r\nvar options1\
                      \ = {\r\n            //target: 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes',\r\
                      \n            target: targeturlAttr,\r\n            method:\
                      \ 'GET',\r\n            \r\n            headers: {\r\n     \
                      \               'provider-id': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                    'provider-indicator':\
                      \  apim.getvariable('provider_indicator'), // 'H',\r\n     \
                      \               'provider-multi-address-key': apim.getvariable('provider_multiaddresskey'),\
                      \ \r\n\r\n            },\r\n            timeout: 60,\r\n   \
                      \         sslClientProfile: \"api-sslcli-all\"\r\n        \r\
                      \n};\r\nurlopen1.open(options1, function(error, response) {\r\
                      \n  if (error) {\r\n    // an error occurred during the request\
                      \ sending or response header parsing\r\n    console.log(error);\r\
                      \n    session.output.write(\"urlopen1 error: \"+JSON.stringify(error));\r\
                      \n \r\n  } else {\r\n    // get the response status code\r\n\
                      \    var responseStatusCode = response.statusCode;\r\n    var\
                      \ responseReasonPhrase = response.reasonPhrase;\r\n    console.log(\"\
                      Response status code: \" + responseStatusCode);\r\n    console.log(\"\
                      Response reason phrase: \" + responseReasonPhrase);\r\n    response.readAsJSON(function(error,\
                      \ responseData){\r\n      if (error){\r\n        console.log(error);\r\
                      \n        throw error ;\r\n      } else {\r\n        apim.setvariable('attrResp.body',responseData);\r\
                      \n        apim.output('application/json');\r\n        //session.output.write(responseData);\r\
                      \n    \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n\r\nvar urlopen2\
                      \ = require('urlopen');\r\nvar options2 = {\r\n            target:\
                      \ targeturlDemo,\r\n            method: 'GET',\r\n         \r\
                      \n            headers: {\r\n                     'provider-id':\
                      \ apim.getvariable('provider_id'), //'000005405',\r\n      \
                      \               'provider-indicator':  apim.getvariable('provider_indicator'),\
                      \ // 'H',\r\n                     'provider-multi-address-key':\
                      \ apim.getvariable('provider_multiaddresskey'), //'L'\r\n  \
                      \              // 'provider-id': '000005405', //'000005405',\r\
                      \n                //  'provider-indicator':  'D', // 'H',\r\n\
                      \                //  //'provider-multi-address-key': '' //L\r\
                      \n            },\r\n            timeout: 60,\r\n           \
                      \ sslClientProfile: \"api-sslcli-all\"\r\n           \r\n};\r\
                      \nurlopen2.open(options2, function(error, response) {\r\n  if\
                      \ (error) {\r\n    // an error occurred during the request sending\
                      \ or response header parsing\r\n    console.log(error);\r\n\
                      \    session.output.write(\"urlopen2 error: \"+JSON.stringify(error));\r\
                      \n    apim.setvariable('ErrorMsg.body' ,error);\r\n  } else\
                      \ {\r\n    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          \r\n      \
                      \    apim.setvariable('demoResp.body',responseData);\r\n   \
                      \       apim.output('application/json');\r\n         // session.output.write(responseData);/\r\
                      \n      }\r\n    });\r\n  }\r\n}\r\n);\r\nvar checkcont = apim.getvariable('message.headers.checkContract');\r\
                      \nvar providerInd = apim.getvariable('provider_indicator');\r\
                      \nif(checkcont == \"True\"){\r\nif(providerInd == \"D\"){\r\n\
                      var urlopen3 = require('urlopen');\r\nvar options3 = {\r\n \
                      \           target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/physicians/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n            headers: {\r\
                      \n                       'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \         },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen3.open(options3,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen3 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          \r\n      \
                      \    apim.setvariable('LOB.body',responseData);\r\n        \
                      \  apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\nelse\
                      \ if(providerInd == \"H\") {\r\n    var urlopen4 = require('urlopen');\r\
                      \n\tvar options4 = {\r\n            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/facilities/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                      'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \         },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen4.open(options4,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen4 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          apim.setvariable('LOB.body',responseData);\r\
                      \n         // apim.output('application/json');\r\n         \
                      \ //session.output.write(responseData);\r\n      }\r\n    });\r\
                      \n  }\r\n}\r\n);\r\n}\r\n}"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: " var attributeMapping = new Array();\r\n var demoMapping\
                      \ = new Array();\r\n var LOBMapping = new Array();\r\n var errorMSG\
                      \ = apim.getvariable('errorMsg.body');\r\n\r\n var combinedProvider\
                      \ = new Array();\r\n \r\n attributeMapping = apim.getvariable('attrResp.body');\r\
                      \n demoMapping = apim.getvariable('demoResp.body');\r\n LOBMapping\
                      \ = apim.getvariable('LOB.body');\r\n //attributeMapping = LOBMapping[0];\r\
                      \n\r\nvar errorcode = demoMapping.error;\r\nif(errorcode ==\
                      \ \"Bad Request\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 400);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Not Found\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 404);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Internal Server Error\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 500);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse\r\n{\r\n  \
                      \   for(var j= 0; j<attributeMapping.length; j++)\r\n     {\r\
                      \n         attributeMapping[j].cfiExistForLineOfBusiness = LOBMapping;\r\
                      \n     }\r\n    for(var i=0;i<demoMapping.length;i++)\r\n  \
                      \  {\r\n\t\tvar demoindex = demoMapping[i];\r\n\t\tvar attIndex\
                      \ = attributeMapping[i];\r\n\t\t\r\n\tfor(var key in attIndex)\r\
                      \n\t{\r\n\t\tdemoindex[key] = attIndex[key];\r\n\t}\r\n\r\n\t\
                      combinedProvider.push(demoindex);\r\n    }\r\n\r\napim.setvariable('message.body',combinedProvider);\r\
                      \n// apim.setvariable('message.body',responseD);\r\n //session.output.write(demoMapping);\r\
                      \napim.output('application/json');\r\n}\r\n"
              - condition: "apim.getvariable('request.headers.provider-id') != null\
                  \ && apim.getvariable('request.headers.provider-indicator') != null"
                execute:
                - set-variable:
                    title: "set-variable"
                    actions:
                    - set: "provider_id"
                      value: "$(request.headers.provider-id)"
                      required: true
                    - set: "provider_indicator"
                      value: "$(request.headers.provider-indicator)"
                    - set: "provider_multiaddresskey"
                      value: "$(request.headers.provider-multi-address-key)"
                    - set: "limit"
                      value: "$(request.parameters.limit)"
                    - set: "offset"
                      value: "$(request.parameters.offset)"
                    - set: "check_Contract"
                      value: "$(request.headers.checkContract)"
                    version: "1.0.0"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: "var checkContract = apim.getvariable('request.headers.checkContract');\r\
                      \nvar qstring = apim.getvariable('request.search');\r\nvar targeturlAttr=\
                      \ 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes'\
                      \ + qstring;\r\nvar targeturlDemo= 'https://provider-demographics-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/demographics'\
                      \ + qstring;\r\nvar urlopen1 = require('urlopen');\r\nvar options1\
                      \ = {\r\n            //target: 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes',\r\
                      \n            target: targeturlAttr,\r\n            method:\
                      \ 'GET',\r\n            \r\n            headers: {\r\n     \
                      \               'provider-id': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                    'provider-indicator':\
                      \  apim.getvariable('provider_indicator'), // 'H',\r\n     \
                      \               //'provider-multi-address-key': apim.getvariable('provider_multiaddresskey'),\
                      \ \r\n\r\n            },\r\n            timeout: 60,\r\n   \
                      \         sslClientProfile: \"api-sslcli-all\"\r\n        \r\
                      \n};\r\nurlopen1.open(options1, function(error, response) {\r\
                      \n  if (error) {\r\n    // an error occurred during the request\
                      \ sending or response header parsing\r\n    console.log(error);\r\
                      \n    session.output.write(\"urlopen1 error: \"+JSON.stringify(error));\r\
                      \n  } else {\r\n    // get the response status code\r\n    var\
                      \ responseStatusCode = response.statusCode;\r\n    var responseReasonPhrase\
                      \ = response.reasonPhrase;\r\n    console.log(\"Response status\
                      \ code: \" + responseStatusCode);\r\n    console.log(\"Response\
                      \ reason phrase: \" + responseReasonPhrase);\r\n    \r\n   \
                      \ response.readAsJSON(function(error, responseData){\r\n   \
                      \   if (error){\r\n        console.log(error);\r\n        throw\
                      \ error ;\r\n      } else {\r\n        apim.setvariable('attrResp.body',responseData);\r\
                      \n        apim.output('application/json');\r\n        //session.output.write(responseData);\r\
                      \n        \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n\r\nvar\
                      \ urlopen2 = require('urlopen');\r\nvar options2 = {\r\n   \
                      \         target: targeturlDemo,\r\n            method: 'GET',\r\
                      \n         \r\n            headers: {\r\n                  \
                      \   'provider-id': apim.getvariable('provider_id'), //'000005405',\r\
                      \n                     'provider-indicator':  apim.getvariable('provider_indicator'),\
                      \ // 'H',\r\n                // 'provider-id': '000005405',\
                      \ //'000005405',\r\n                //  'provider-indicator':\
                      \  'D', // 'H',\r\n                //  //'provider-multi-address-key':\
                      \ '' //L\r\n            },\r\n            timeout: 60,\r\n \
                      \           sslClientProfile: \"api-sslcli-all\"\r\n       \
                      \    \r\n};\r\nurlopen2.open(options2, function(error, response)\
                      \ {\r\n  if (error) {\r\n    // an error occurred during the\
                      \ request sending or response header parsing\r\n    console.log(error);\r\
                      \n    session.output.write(\"urlopen2 error: \"+JSON.stringify(error));\r\
                      \n  } else {\r\n    // get the response status code\r\n    var\
                      \ responseStatusCode = response.statusCode;\r\n    var responseReasonPhrase\
                      \ = response.reasonPhrase;\r\n    console.log(\"Response status\
                      \ code: \" + responseStatusCode);\r\n    console.log(\"Response\
                      \ reason phrase: \" + responseReasonPhrase);\r\n    response.readAsJSON(function(error,\
                      \ responseData){\r\n      if (error){\r\n        console.log(error);\r\
                      \n        throw error ;\r\n      } else {\r\n          \r\n\
                      \          apim.setvariable('demoResp.body',responseData);\r\
                      \n          apim.output('application/json');\r\n         //\
                      \ session.output.write(responseData);\r\n      \r\n      }\r\
                      \n    });\r\n  }\r\n}\r\n);\r\n\r\nvar checkcont = apim.getvariable('message.headers.checkContract');\r\
                      \nvar providerInd = apim.getvariable('provider_indicator');\r\
                      \nif(checkcont == \"True\"){ \r\nif(providerInd == \"D\"){\r\
                      \nvar urlopen3 = require('urlopen');\r\nvar options3 = {\r\n\
                      \            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/physicians/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                     'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \         },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen3.open(options3,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen3 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          \r\n      \
                      \    apim.setvariable('LOB.body',responseData);\r\n        \
                      \  apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\nelse\
                      \ if(providerInd == \"H\") {\r\n    var urlopen4 = require('urlopen');\r\
                      \n\tvar options4 = {\r\n            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/facilities/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                      'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \         },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen4.open(options4,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen4 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          apim.setvariable('LOB.body',responseData);\r\
                      \n          apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\n}\r\
                      \n"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: " var attributeMapping = new Array();\r\n var demoMapping\
                      \ = new Array();\r\n var LOBMapping = new Array();\r\n var errorMSG\
                      \ = apim.getvariable('errorMsg.body');\r\n\r\n var combinedProvider\
                      \ = new Array();\r\n \r\n attributeMapping = apim.getvariable('attrResp.body');\r\
                      \n demoMapping = apim.getvariable('demoResp.body');\r\n LOBMapping\
                      \ = apim.getvariable('LOB.body');\r\n //attributeMapping = LOBMapping[0];\r\
                      \n\r\nvar errorcode = demoMapping.error;\r\nif(errorcode ==\
                      \ \"Bad Request\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 400);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Not Found\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 404);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Internal Server Error\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 500);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse\r\n{\r\n  \
                      \   for(var j= 0; j<attributeMapping.length; j++)\r\n     {\r\
                      \n         attributeMapping[j].cfiExistForLineOfBusiness = LOBMapping;\r\
                      \n     }\r\n    for(var i=0;i<demoMapping.length;i++)\r\n  \
                      \  {\r\n\t\tvar demoindex = demoMapping[i];\r\n\t\tvar attIndex\
                      \ = attributeMapping[i];\r\n\t\t\r\n\tfor(var key in attIndex)\r\
                      \n\t{\r\n\t\tdemoindex[key] = attIndex[key];\r\n\t}\r\n\r\n\t\
                      combinedProvider.push(demoindex);\r\n    }\r\n\r\napim.setvariable('message.body',combinedProvider);\r\
                      \n// apim.setvariable('message.body',responseD);\r\n //session.output.write(demoMapping);\r\
                      \napim.output('application/json');\r\n}\r\n\r\n\r\n //}"
              - condition: "apim.getvariable('request.headers.provider-id') != null"
                execute:
                - set-variable:
                    title: "set-variable"
                    actions:
                    - set: "provider_id"
                      value: "$(request.headers.provider-id)"
                      required: true
                    - set: "provider_indicator"
                      value: "$(request.headers.provider-indicator)"
                    - set: "provider_multiaddresskey"
                      value: "$(request.headers.provider-multi-address-key)"
                    - set: "limit"
                      value: "$(request.parameters.limit)"
                    - set: "offset"
                      value: "$(request.parameters.offset)"
                    - set: "checkContract"
                      value: "$(request.headers.checkContract)"
                    version: "1.0.0"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: "var checkContract = apim.getvariable('request.headers.checkContract');\r\
                      \nvar qstring = apim.getvariable('request.search');\r\nvar targeturlAttr=\
                      \ 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes'\
                      \ + qstring;\r\nvar targeturlDemo= 'https://provider-demographics-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/demographics'\
                      \ + qstring;\r\nvar urlopen1 = require('urlopen');\r\nvar options1\
                      \ = {\r\n            target: targeturlAttr,\r\n            method:\
                      \ 'GET',\r\n            \r\n            headers: {\r\n     \
                      \               'provider-id': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                    \r\n            },\r\
                      \n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n        \r\n};\r\nurlopen1.open(options1,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen1 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n        apim.setvariable('attrResp.body',responseData);\r\
                      \n        apim.output('application/json');\r\n        //session.output.write(responseData);\r\
                      \n        \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n\r\nvar\
                      \ urlopen2 = require('urlopen');\r\nvar options2 = {\r\n   \
                      \         target: targeturlDemo, \r\n            method: 'GET',\r\
                      \n         \r\n            headers: {\r\n                  \
                      \   'provider-id': apim.getvariable('provider_id'), //'000005405',\r\
                      \n                     \r\n                // 'provider-id':\
                      \ '000005405', //'000005405',\r\n                //  'provider-indicator':\
                      \  'D', // 'H',\r\n                //  //'provider-multi-address-key':\
                      \ '' //L\r\n            },\r\n            timeout: 60,\r\n \
                      \           sslClientProfile: \"api-sslcli-all\"\r\n       \
                      \    \r\n};\r\nurlopen2.open(options2, function(error, response)\
                      \ {\r\n  if (error) {\r\n    // an error occurred during the\
                      \ request sending or response header parsing\r\n    console.log(error);\r\
                      \n    session.output.write(\"urlopen2 error: \"+JSON.stringify(error));\r\
                      \n  } else {\r\n    // get the response status code\r\n    var\
                      \ responseStatusCode = response.statusCode;\r\n    var responseReasonPhrase\
                      \ = response.reasonPhrase;\r\n    console.log(\"Response status\
                      \ code: \" + responseStatusCode);\r\n    console.log(\"Response\
                      \ reason phrase: \" + responseReasonPhrase);\r\n    response.readAsJSON(function(error,\
                      \ responseData){\r\n      if (error){\r\n        console.log(error);\r\
                      \n        throw error ;\r\n      } else {\r\n          \r\n\
                      \          apim.setvariable('demoResp.body',responseData);\r\
                      \n          apim.output('application/json');\r\n         //\
                      \ session.output.write(responseData);\r\n      \r\n      }\r\
                      \n    });\r\n  }\r\n}\r\n);\r\nvar checkcont = apim.getvariable('message.headers.checkContract');\r\
                      \nvar providerInd = apim.getvariable('provider.indicator');\r\
                      \nif(checkContract == \"True\"){\r\nif(providerInd == \"D\"\
                      ){\r\nvar urlopen3 = require('urlopen');\r\nvar options3 = {\r\
                      \n            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/physicians/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                     'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                // 'provider-id': '000030912', //'000005405',\r\
                      \n                 //'provider-indicator':  'H', // 'H',\r\n\
                      \                 //'provider-multi-address-key': 'L' //L\r\n\
                      \            },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen3.open(options3,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen3 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          \r\n      \
                      \    apim.setvariable('LOB.body',responseData);\r\n        \
                      \  apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\nelse\
                      \ if(providerInd == \"H\") {\r\n    var urlopen4 = require('urlopen');\r\
                      \n\tvar options4 = {\r\n            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/facilities/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                    'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \             // 'provider-id': '000030912', //'000005405',\r\
                      \n                 //'provider-indicator':  'H', // 'H',\r\n\
                      \                 //'provider-multi-address-key': 'L' //L\r\n\
                      \            },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen4.open(options4,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen4 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          apim.setvariable('LOB.body',responseData);\r\
                      \n          apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\n}"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: " var attributeMapping = new Array();\r\n var demoMapping\
                      \ = new Array();\r\n var LOBMapping = new Array();\r\n var errorMSG\
                      \ = apim.getvariable('errorMsg.body');\r\n\r\n var combinedProvider\
                      \ = new Array();\r\n \r\n attributeMapping = apim.getvariable('attrResp.body');\r\
                      \n demoMapping = apim.getvariable('demoResp.body');\r\n LOBMapping\
                      \ = apim.getvariable('LOB.body');\r\n //attributeMapping = LOBMapping[0];\r\
                      \n\r\nvar errorcode = demoMapping.error;\r\nif(errorcode ==\
                      \ \"Bad Request\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 400);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Not Found\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 404);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Internal Server Error\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 500);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse\r\n{\r\n  \
                      \   for(var j= 0; j<attributeMapping.length; j++)\r\n     {\r\
                      \n         attributeMapping[j].cfiExistForLineOfBusiness = LOBMapping;\r\
                      \n     }\r\n    for(var i=0;i<demoMapping.length;i++)\r\n  \
                      \  {\r\n\t\tvar demoindex = demoMapping[i];[]\r\n\t\tvar attIndex\
                      \ = attributeMapping[i];\r\n\t\t\r\n\tfor(var key in attIndex)\r\
                      \n\t{\r\n\t\tdemoindex[key] = attIndex[key];\r\n\t}\r\n\tcombinedProvider.push(demoindex);\r\
                      \n    }\r\n\r\napim.setvariable('message.body',combinedProvider);\r\
                      \n// apim.setvariable('message.body',responseD);\r\n //session.output.write(demoMapping);\r\
                      \napim.output('application/json');\r\n}\r\n"
              - condition: "apim.getvariable('request.headers.provider-tax-id') !=\
                  \ null"
                execute:
                - set-variable:
                    title: "set-variable"
                    actions:
                    - set: "provider_tax_id"
                      value: "$(request.headers.provider-tax-id)"
                    version: "1.0.0"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: "var checkContract = apim.getvariable('request.headers.checkContract');\r\
                      \nvar qstring = apim.getvariable('request.search');\r\nvar targeturlAttr=\
                      \ 'https://provider-attributes-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/attributes'\
                      \ + qstring;\r\nvar targeturlDemo= 'https://provider-demographics-api-svc-qa.apps.qa-cf.humana.local/v1-beta/providers/demographics'\
                      \ + qstring;\r\nvar urlopen1 = require('urlopen');\r\nvar options1\
                      \ = {\r\n            target: targeturlAttr,\r\n            method:\
                      \ 'GET',\r\n            \r\n            headers: {\r\n     \
                      \               'provider-tax-id': apim.getvariable('provider_tax_id'),\
                      \ //'000005405',\r\n                    \r\n            },\r\
                      \n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n        \r\n};\r\nurlopen1.open(options1,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen1 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n        apim.setvariable('attrResp.body',responseData);\r\
                      \n        apim.output('application/json');\r\n        //session.output.write(responseData);\r\
                      \n        \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n\r\nvar\
                      \ urlopen2 = require('urlopen');\r\nvar options2 = {\r\n   \
                      \         target: targeturlDemo, \r\n            method: 'GET',\r\
                      \n         \r\n            headers: {\r\n                  \
                      \   'provider-tax-id': apim.getvariable('provider_tax_id'),\
                      \ //'000005405',\r\n                     \r\n              \
                      \  // 'provider-id': '000005405', //'000005405',\r\n       \
                      \         //  'provider-indicator':  'D', // 'H',\r\n      \
                      \          //  //'provider-multi-address-key': '' //L\r\n  \
                      \          },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen2.open(options2,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen2 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    response.readAsJSON(function(error, responseData){\r\n\
                      \      if (error){\r\n        console.log(error);\r\n      \
                      \  throw error ;\r\n      } else {\r\n          \r\n       \
                      \   apim.setvariable('demoResp.body',responseData);\r\n    \
                      \      apim.output('application/json');\r\n         // session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\nvar checkcont\
                      \ = apim.getvariable('message.headers.checkContract');\r\nvar\
                      \ providerInd = apim.getvariable('provider.indicator');\r\n\
                      if(checkContract == \"True\"){\r\nif(providerInd == \"D\"){\r\
                      \nvar urlopen3 = require('urlopen');\r\nvar options3 = {\r\n\
                      \            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/physicians/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                     'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                // 'provider-id': '000030912', //'000005405',\r\
                      \n                 //'provider-indicator':  'H', // 'H',\r\n\
                      \                 //'provider-multi-address-key': 'L' //L\r\n\
                      \            },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen3.open(options3,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen3 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          \r\n      \
                      \    apim.setvariable('LOB.body',responseData);\r\n        \
                      \  apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\nelse\
                      \ if(providerInd == \"H\") {\r\n    var urlopen4 = require('urlopen');\r\
                      \n\tvar options4 = {\r\n            target: 'https://provider-contract-api-svc-dev.apps.qa-cf.humana.local/v1-beta/facilities/lineOfBusiness',\
                      \ \r\n            method: 'GET',\r\n         \r\n          \
                      \  headers: {\r\n                    'provId': apim.getvariable('provider_id'),\
                      \ //'000005405',\r\n                     //'provId':  '000073867',\
                      \ // 'H',\r\n                     'provSuffix': apim.getvariable('provider_indicator'),\
                      \ //'L'\r\n                    //  'provId':  '000062381', //\
                      \ 'H',\r\n                    //  'provSuffix': 'A',\r\n   \
                      \             // 'provider-id': '000030912', //'000005405',\r\
                      \n                 //'provider-indicator':  'H', // 'H',\r\n\
                      \                 //'provider-multi-address-key': 'L' //L\r\n\
                      \            },\r\n            timeout: 60,\r\n            sslClientProfile:\
                      \ \"api-sslcli-all\"\r\n           \r\n};\r\nurlopen4.open(options4,\
                      \ function(error, response) {\r\n  if (error) {\r\n    // an\
                      \ error occurred during the request sending or response header\
                      \ parsing\r\n    console.log(error);\r\n    session.output.write(\"\
                      urlopen4 error: \"+JSON.stringify(error));\r\n  } else {\r\n\
                      \    // get the response status code\r\n    var responseStatusCode\
                      \ = response.statusCode;\r\n    var responseReasonPhrase = response.reasonPhrase;\r\
                      \n    console.log(\"Response status code: \" + responseStatusCode);\r\
                      \n    console.log(\"Response reason phrase: \" + responseReasonPhrase);\r\
                      \n    \r\n    response.readAsJSON(function(error, responseData){\r\
                      \n      if (error){\r\n        console.log(error);\r\n     \
                      \   throw error ;\r\n      } else {\r\n          apim.setvariable('LOB.body',responseData);\r\
                      \n          apim.output('application/json');\r\n          //session.output.write(responseData);\r\
                      \n      \r\n      }\r\n    });\r\n  }\r\n}\r\n);\r\n}\r\n}"
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: " var attributeMapping = new Array();\r\n var demoMapping\
                      \ = new Array();\r\n var LOBMapping = new Array();\r\n var errorMSG\
                      \ = apim.getvariable('errorMsg.body');\r\n\r\n var combinedProvider\
                      \ = new Array();\r\n \r\n attributeMapping = apim.getvariable('attrResp.body');\r\
                      \n demoMapping = apim.getvariable('demoResp.body');\r\n LOBMapping\
                      \ = apim.getvariable('LOB.body');\r\n //attributeMapping = LOBMapping[0];\r\
                      \n\r\nvar errorcode = demoMapping.error;\r\nif(errorcode ==\
                      \ \"Bad Request\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 400);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Not Found\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 404);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse if(errorcode\
                      \ ==\"Internal Server Error\")\r\n{\r\n apim.setvariable('message.status.code',\
                      \ 500);\r\n apim.setvariable('message.body', demoMapping);\r\
                      \n apim.output('application/json');\r\n}\r\nelse\r\n{\r\n  \
                      \   for(var j= 0; j<attributeMapping.length; j++)\r\n     {\r\
                      \n         attributeMapping[j].cfiExistForLineOfBusiness = LOBMapping;\r\
                      \n     }\r\n    for(var i=0;i<demoMapping.length;i++)\r\n  \
                      \  {\r\n\t\tvar demoindex = demoMapping[i];[]\r\n\t\tvar attIndex\
                      \ = attributeMapping[i];\r\n\t\t\r\n\tfor(var key in attIndex)\r\
                      \n\t{\r\n\t\tdemoindex[key] = attIndex[key];\r\n\t}\r\n\tcombinedProvider.push(demoindex);\r\
                      \n    }\r\n\r\napim.setvariable('message.body',combinedProvider);\r\
                      \n// apim.setvariable('message.body',responseD);\r\n //session.output.write(demoMapping);\r\
                      \napim.output('application/json');\r\n}\r\n"
              - otherwise:
                - gatewayscript:
                    title: "gatewayscript"
                    version: "1.0.0"
                    source: " var data = JSON.stringify({\r\n    \"timestamp\": new\
                      \ Date().toISOString(),  \r\n    \"status\": 400,\r\n    \"\
                      error\": \"Bad Request\",\r\n    \"details\": [\r\n        \"\
                      Invalid input combination\"\r\n    ]\r\n}); \r\napim.setvariable('message.body',\
                      \ data);\r\napim.setvariable('message.status.code', 400);\r\n\
                      apim.output('application/json');"
              version: "1.0.0"
        - operations:
          - verb: "post"
            path: "/"
          execute:
          - invoke:
              title: "invoke"
              timeout: 60
              verb: "POST"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://provider-api-svc-dev.apps.qa-cf.humana.local/v1-beta/providers"
        - operations:
          - verb: "patch"
            path: "/"
          execute:
          - invoke:
              title: "invoke"
              timeout: 60
              verb: "PATCH"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              target-url: "https://provider-api-svc-dev.apps.qa-cf.humana.local/v1-beta/providers"
        otherwise: []
        version: "1.0.0"
    catch:
    - errors:
      - "OperationError"
      - "RuntimeError"
      execute: []
  phase: "realized"
  gateway: "datapower-gateway"
paths:
  /:
    get:
      responses:
        200:
          description: "200 OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "No records found matching criteria"
        500:
          description: "Internal Server Error"
      parameters:
      - name: "provider-id"
        type: "string"
        required: true
        in: "header"
      - name: "provider-indicator"
        type: "string"
        required: false
        in: "header"
      - name: "provider-multi-address-key"
        type: "string"
        required: false
        in: "header"
      - name: "limit"
        type: "string"
        required: false
        in: "query"
      - name: "offset"
        type: "string"
        required: false
        in: "query"
      - name: "checkContract"
        type: "string"
        required: false
        in: "header"
      deprecated: true
    post:
      responses:
        200:
          description: ""
      deprecated: true
    patch:
      responses:
        200:
          description: "200 OK"
      deprecated: true
tags: []
responses: {}
